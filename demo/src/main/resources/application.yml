spring:
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  sql:
    init:
      encoding: UTF-8
      mode: always
      schema-locations: classpath:schema.sql
      data-locations: classpath:data.sql
  h2:
    console:
      enabled: true

  security:
    oauth2:
      client:
        registration:
          google: # registrationId
            # providerは、spring.security.oauth2.client.provider.{id}をregistrationIdと違う名前を付けたい場合に定義する。
            # 今回はログインに利用したプロバイダの永続化時に使用する文字列にも採用している。
            provider: google
            client-id: replace-with-your-client-id
            client-secret: replace-with-your-client-secret
            client-authentication-method: post # 通常はpostを指定する。Financial-grade APIだとpostとbasicは使用してはいけないらしい。
            authorization-grant-type: authorization_code # https://docs.spring.io/spring-security/site/docs/current/reference/html/oauth2.html#oauth2Client-client-registration
            redirect-uri: http://localhost:8080/login/oauth2/code/google # googleの場合、指定しなくてもこれと同じものが自動生成される
            scope:
              - openid
              - profile
              - email
            client-name: google # 任意設定項目。自動生成されるログインページのリンク名に使われる。ログインページをカスタマイズするか無効にするのであれば、設定しても意味がない（と思う）。
          github:
            provider: github
            client-id: replace-with-your-client-id
            client-secret: replace-with-your-client-secret
            client-authentication-method: post
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/github # githubの場合、指定しなくてもこれと同じものが自動生成される
            scope: # githubはopenid connectをサポートしてないのでscopeにopenidを指定できない
              - read:user
            client-name: github
          facebook:
            provider: facebook
            client-id: replace-with-your-client-id
            client-secret: replace-with-your-client-secret
            client-authentication-method: post
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/facebook # facebookの場合、指定しなくてもこれと同じものが自動生成される
            scope: # facebookはopenid connectをサポートしてないのでscopeにopenidを指定できない
              - email
            client-name: facebook
        provider:
          google:
            # oidcのdiscovery endpointやoauthのmetadata endpointが提供されている場合、
            # issuer-uriを設定すると必要な情報が自動的に設定される。
            issuer-uri: https://accounts.google.com
            # discovery endpointにより、以下のコメントアウト部分の同じ内容が自動的に設定される
            # authorization-uri: "https://accounts.google.com/o/oauth2/v2/auth
            # token-uri: https://oauth2.googleapis.com/token
            # user-info-uri: https://openidconnect.googleapis.com/v1/userinfo
            # user-info-authentication-method: post

            # refresh tokenを発行させるためにaccess_typeクエリも指定している。access_typeはgoogleの独自仕様だと思われる。
            # https://developers.google.com/identity/protocols/OAuth2WebServer#offline
            authorization-uri: "https://accounts.google.com/o/oauth2/v2/auth?access_type=offline"
            #jwt-set-uri: https://www.googleapis.com/oauth2/v3/certs

            user-name-attribute: name #ユーザ名をどの属性から取得するかを指定する
          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user
            user-info-authentication-method: post
            user-name-attribute: name
            # githubはmetadata endpointを提供してない（っぽい）ので、issuer-uriは使えない
          facebook:
            authorization-uri: https://www.facebook.com/v6.0/dialog/oauth
            token-uri: https://graph.facebook.com/v6.0/oauth/access_token
            user-info-uri: https://graph.facebook.com/me?fields=id,name,email
            user-info-authentication-method: post
            user-name-attribute: name
            # facebookはmetadata endpointを提供してない（っぽい）ので、issuer-uriは使えない